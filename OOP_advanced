class BankAccount:
    def __init__(self, account_number, balance):
        self.__account_number = account_number
        self.__balance = balance

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount > self.__balance:
            print("Insufficient balance")
        else:
            self.__balance -= amount

    def get_balance(self):
        return self.__balance


class BankCustomer:
    def __init__(self, name, account):
        self.__name = name
        self.__account = account

    def deposit_money(self, amount):
        self.__account.deposit(amount)

    def withdraw_money(self, amount):
        self.__account.withdraw(amount)

    def get_balance(self):
        return self.__account.get_balance()


account1 = BankAccount(123456789, 5000)
customer1 = BankCustomer("John", account1)

customer1.deposit_money(1000)
print(customer1.get_balance())

customer1.withdraw_money(2000)
print(customer1.get_balance())


class Shape:
    def area(self):
        pass


class Rectangle(Shape):
    def __init__(self, length, breadth):
        self.__length = length
        self.__breadth = breadth

    def area(self):
        return self.__length * self.__breadth


class Circle(Shape):
    def __init__(self, radius):
        self.__radius = radius

    def area(self):
        return 3.14 * self.__radius ** 2


class AreaCalculator:
    def calculate_area(self, shapes):
        total_area = 0
        for shape in shapes:
            total_area += shape.area()
        return total_area


rectangle1 = Rectangle(5, 10)
circle1 = Circle(7)
calculator1 = AreaCalculator()

total_area = calculator1.calculate_area([rectangle1, circle1])
print(total_area)



class Employee:
    num_of_employees = 0
    raise_amount = 1.04

    def __init__(self, first_name, last_name, salary):
        self.first_name = first_name
        self.last_name = last_name
        self.salary = salary
        Employee.num_of_employees += 1

    def full_name(self):
        return f"{self.first_name} {self.last_name}"

    def apply_raise(self):
        self.salary = int(self.salary * self.raise_amount)

    @classmethod
    def set_raise_amount(cls, amount):
        cls.raise_amount = amount


class Manager(Employee):
    def __init__(self, first_name, last_name, salary, employees=None):
        super().__init__(first_name, last_name, salary)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees

    def add_employee(self, employee):
        if employee not in self.employees:
            self.employees.append(employee)

    def remove_employee(self, employee):
        if employee in self.employees:
            self.employees.remove(employee)

    def print_employees(self):
        for employee in self.employees:
            print("-->", employee.full_name())


employee1 = Employee("John", "Doe", 50000)
employee2 = Employee("Jane", "Doe", 60000)

manager1 = Manager("Jack", "Smith", 70000, [employee1])
manager1.add_employee(employee2)

manager1.print_employees()

Manager.set_raise_amount(1.05)
employee1
employee1.apply_raise()
print(employee1.salary)
print(employee1.raise_amount)
print(employee2.raise_amount)
print(manager1.raise_amount)


class Animal:
    def __init__(self, name):
        self.name = name

    def move(self):
        print(f"{self.name} is moving.")


class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed

    def bark(self):
        print("Woof woof!")


class Fish(Animal):
    def __init__(self, name, water_type):
        super().__init__(name)
        self.water_type = water_type

    def swim(self):
        print(f"{self.name} is swimming.")


class Pet:
    def __init__(self, name, owner):
        self.name = name
        self.owner = owner

    def get_info(self):
        print(f"{self.name} is owned by {self.owner}.")


class DogPet(Dog, Pet):
    def __init__(self, name, breed, owner):
        Dog.__init__(self, name, breed)
        Pet.__init__(self, name, owner)


class FishPet(Fish, Pet):
    def __init__(self, name, water_type, owner):
        Fish.__init__(self, name, water_type)
        Pet.__init__(self, name, owner)


dog1 = Dog("Buddy", "Golden Retriever")
fish1 = Fish("Nemo", "Saltwater")
dog_pet1 = DogPet("Max", "Labrador", "John")
fish_pet1 = FishPet("Goldie", "Freshwater", "Jane")

dog1.move()
fish1.move()
dog1.bark()
fish1.swim()
dog_pet1.get_info()
fish_pet1.get_info()




